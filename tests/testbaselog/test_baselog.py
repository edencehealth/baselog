#!/usr/bin/env python3
""" test configuration via command-line arguments """
import os
import re
import subprocess
from typing import Final

import pytest

import baselog
from baselog import BaseLog

# REGEX_TS is a regex segment (string) which matches timestamps used in this library
#   e.g. timestamps like: 2023-04-11T11:16:43+0200
REGEX_TS: Final[str] = r"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+-]\d{4}"


# this should probably be a fixture
def read_file_text(path: str, encoding="utf-8", errors=None) -> str:
    """reads the contents of the given file and returns them as a string"""
    with open(path, "rt", encoding=encoding, errors=errors) as textfile:
        return textfile.read()


def unindent(content: str, spaces: int = 4) -> str:
    """given a string, unindent each of its lines by n spaces"""
    regex = r"^\s{n}".replace("n", str(spaces))
    return "\n".join([re.sub(regex, "", line) for line in content.strip().splitlines()])


def test_basics(tmp_log_dir, capsys):
    """test basic operation of baselog"""
    logger = BaseLog(
        "testapp",
        log_dir=tmp_log_dir,
        console_log_level="DEBUG",
        file_log_level="DEBUG",
    )
    assert os.path.exists(logger.log_file)

    logger.debug("I'm a log message at debug level!")
    logger.info("I'm a log message at info level!")
    logger.warning("I'm a log message at warning level!")
    logger.error("I'm a log message at error level!")
    logger.critical("I'm a log message at critical level!")
    captured = capsys.readouterr()

    expected_contents = ""
    for level in ("debug", "info", "warning", "error", "critical"):
        expected_contents += (
            f"{REGEX_TS} - testapp - {level.upper()} - "
            f"I'm a log message at {level} level!\n"
        )

    assert re.match(f"^{expected_contents}$", captured.err)
    assert re.match(f"^{expected_contents}$", read_file_text(logger.log_file))


def test_uncaught_exception(tmp_run_files, tmp_log_dir):
    """
    ensure that an uncaught exception results in log messages both to stderr and the
    logfile
    """
    prog_file, stderr_log_file = tmp_run_files

    # pytest will get in the way here, so we have to write a small program to a
    # temp_file, run it and check the outputs

    # fmt:off
    prog_file.write_text(unindent("""
    #!/usr/bin/env python3

    import sys
    from baselog import BaseLog

    class RobinExclamation(Exception):
        pass

    def main():
        logger = BaseLog(
            "testapp",
            log_dir=sys.argv[1],
            console_log_level="DEBUG",
            file_log_level="DEBUG",
        )
        raise RobinExclamation("Holy uncaught exceptions, Batman!")

    if __name__ == '__main__':
        main()
    """))
    # fmt:on

    with open(stderr_log_file, "wt", encoding="utf-8") as stderrfh:
        with pytest.raises(subprocess.CalledProcessError):
            subprocess.check_output(
                ("python3", prog_file, tmp_log_dir),
                stderr=stderrfh,
                env={
                    "PYTHONPATH": os.path.dirname(baselog.__file__),
                    "PATH": os.environ.get("PATH"),
                },
            )

    # this is the path to the text log file generated by the test app
    # we told the app which directory to log in but the filename is based on
    # a timestamp (by default)
    prog_log_file = [
        os.path.join(tmp_log_dir, filename)
        for filename in os.listdir(tmp_log_dir)
        if filename.startswith("testapp_")
    ][0]
    assert prog_log_file != ""
    prog_log = read_file_text(prog_log_file)

    assert (
        "testapp - CRITICAL - uncaught RobinExclamation exception: "
        "Holy uncaught exceptions, Batman!"
    ) in prog_log
    assert "traceback-000: Traceback (most recent call last):" in prog_log

    # subprocess captured the program's stderr into a file for us
    stderr_log = read_file_text(stderr_log_file)
    assert stderr_log != ""
    assert (
        "testapp - CRITICAL - uncaught RobinExclamation exception: "
        "Holy uncaught exceptions, Batman!"
    ) in stderr_log
    assert "traceback-000: Traceback (most recent call last):" in stderr_log
